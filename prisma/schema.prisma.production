// Prisma Production Configuration for Vercel Deployment
// This file should be used with environment-specific database URLs

generator client {
  provider = "prisma-client-js"
  // Enable binary targets for Vercel's deployment environment
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // SSL is required for most production database providers
  sslMode   = "require"
  // Connection pool configuration for serverless environments
  connectionLimit = env("DB_CONNECTION_LIMIT") || "5"
}

// Admin User
model Admin {
  id            String   @id @default(cuid())
  email         String   @unique
  password      String
  name          String
  role          String   @default("admin")
  isActive      Boolean  @default(true)
  lastLoginAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("admins")
  @@index([email])
  @@index([isActive])
}

// Content Management
model Content {
  id          String   @id @default(cuid())
  key         String   @unique
  title       String
  content     String   // Rich text content
  type        String   // 'text', 'html', 'json'
  page        String?  // Page identifier
  section     String?  // Section identifier
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("content")
  @@index([key])
  @@index([type])
  @@index([page])
  @@index([isActive])
}

// Page Templates
model PageTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  thumbnail   String?
  content     String   // JSON template structure
  category    String   @default("general")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("page_templates")
  @@index([category])
  @@index([isActive])
}

// SEO Management
model SEO {
  id          String   @id @default(cuid())
  pageId      String?  // Reference to page or landing page
  pageType    String   // 'page', 'landing_page', 'blog'
  title       String?
  description String?
  keywords    String?
  ogTitle     String?
  ogDescription String?
  ogImage     String?
  canonical   String?
  robots      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("seo")
  @@index([pageType])
  @@index([pageId])
}

// Theme & Style Management
model Theme {
  id          String   @id @default(cuid())
  name        String
  description String?
  isActive    Boolean  @default(false)
  settings    String   // JSON theme settings
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("themes")
  @@index([isActive])
}

// Pages Management
model Page {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String   // JSON content for block-based editor
  seoTitle    String?
  seoDescription String?
  seoKeywords String?
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("pages")
  @@index([slug])
  @@index([isPublished])
  @@index([createdAt])
}

// Landing Pages
model LandingPage {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String   // JSON content for drag-and-drop builder
  seoTitle    String?
  seoDescription String?
  seoKeywords String?
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("landing_pages")
  @@index([slug])
  @@index([isPublished])
  @@index([createdAt])
}

// AI Tools
model AITool {
  id          String   @id @default(cuid())
  name        String
  description String?
  inputFields String   // JSON schema for input fields
  prompt      String
  llmSettings String   // JSON for LLM settings (model, temperature, etc.)
  testInterface String // JSON for test interface configuration
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Prompt history versions
  promptVersions PromptVersion[]
  
  @@map("ai_tools")
  @@index([isActive])
  @@index([createdAt])
}

// Prompt Version History
model PromptVersion {
  id        String   @id @default(cuid())
  version   Int
  prompt    String
  notes     String?
  createdAt DateTime @default(now())
  
  toolId    String
  tool      AITool   @relation(fields: [toolId], references: [id], onDelete: Cascade)
  
  @@unique([toolId, version])
  @@map("prompt_versions")
  @@index([toolId])
}

// Scripts & Pixels
model Script {
  id          String   @id @default(cuid())
  name        String
  code        String
  type        String   // 'pixel', 'analytics', 'custom'
  placement   String   // 'head', 'body_start', 'body_end'
  isGlobal    Boolean  @default(true)
  pageId      String?  // null if global
  conditions  String?  // JSON for conditional rules
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("scripts")
  @@index([type])
  @@index([placement])
  @@index([isGlobal])
  @@index([isActive])
}

// Settings
model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String   // JSON value
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("settings")
  @@index([key])
}

// Assets (Images, Files)
model Asset {
  id          String   @id @default(cuid())
  name        String
  filename    String
  originalName String
  mimeType    String
  size        Int
  path        String
  url         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("assets")
  @@index([mimeType])
  @@index([createdAt])
}